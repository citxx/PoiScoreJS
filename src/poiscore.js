/**
 * The MIT License (MIT)
 * Copyright (c) 2013 Artem Tabolin
 *  
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ======================================================================
 */

var PoiScore = {
    defaultProps: {
        descriptionSize: 4,  // Size of description box in lines. Zero if not wanted.
        sideFieldSize: 0.25,  // Size of comment box in relation to body width. Zero if not wanted.
        subGroupSize: 4,
        groupSize: 2,
        lineSize: 4,
        linesNumber: 8,
        copyright: "Copyright (C) 2013 Yuta Imamura, poicommunity.com",
        footer: "Generated by PoiScoreJS"
    },
    
    properties: function(props) {
        var newProps = {};
        
        for (var key in this.defaultProps) {
            if (this.defaultProps.hasOwnProperty(key)) {
                newProps[key] = this.defaultProps[key];
            }
        }
        
        for (var key in props) {
            if (props.hasOwnProperty(key)) {
                newProps[key] = props[key];
            }
        }
        
        return newProps;
    },
    
    /** Generate PoiScore document of several pages. */
    gen: function(pages) {
        var doc = new jsPDF();
        for (var i = 0; i < pages.length; i++) {
            var pageProps = pages[i];
            if (i > 0) {
                doc.addPage();
            }
            this.addScore(doc, pageProps, 20, 10, 180, 277);
        }
        return doc;
    },
    
    /** Generate single-paged PoiScore document. */
    genPage: function(props) {
        var doc = new jsPDF();
        this.addScore(doc, props, 20, 10, 180, 277);
        return doc;
    },
    
    /** Fill current page in the 'doc' with appropriate PoiScore page. */
    addScore: function(doc, props, x, y, width, height) {
        this.addHeader(doc, props, x, y, width, 0.06 * height);
        this.addBody(doc, props, x, y + 0.07 * height, width, 0.885 * height);
        this.addFooter(doc, props, x, y + 0.96 * height, width, 0.04 * height);
        return doc;
    },
    
    addHeader: function(doc, props, x, y, width, height) {
        var firstY = y + height / 2.1;
        var secondY = y + 2 * height / 2.1;
        var lX = x + 2 * width / 3;
        var rX = x + 5 * width / 6;
        
        doc.setLineWidth(0.15); doc.setDrawColor(0, 0, 0);
        doc.line(x, firstY, lX, firstY);
        doc.line(x, secondY, lX, secondY);
        doc.line(rX, secondY, x + width, secondY);
    },
    
    addFooter: function(doc, props, x, y, width, height) {
        doc.setFont("helvetica");
        
        var psFontSize = 11;
        doc.setFontSize(psFontSize);
        doc.setTextColor(175, 175, 175);
        var psTextHeight = psFontSize / (72 / 25.6);  // In mm.
        doc.text("POISCORE", x, y + psTextHeight);

        var footnoteTR = function(doc, text, xpos, ypos, fontSize) {
            doc.setFontSize(fontSize);
            doc.setTextColor(150, 150, 150);
            var textHeight = fontSize / (72 / 25.6);  // In mm.
            var textWidth = fontSize * doc.getStringUnitWidth(text) / (72 / 25.6);
            doc.text(text, xpos - textWidth, ypos + textHeight);
            return textHeight;
        };
        
        var th = footnoteTR(doc, props.copyright, x + width, y, 8);
        footnoteTR(doc, props.footer, x + width, y + th + 1, 8);
},
    
    addBody: function(doc, props, x, y, width, height) {
        doc.setLineWidth(0.3);
        doc.rect(x, y, width, height);
        if (props.sideFieldSize > 0) {
            var xpos = x + props.sideFieldSize * width;
            doc.line(xpos, y, xpos, y + height);
            this.addWorkspace(doc, props, xpos, y, width - (xpos - x), height);
        }
        else {
            this.addWorkspace(doc, props, x, y, width, height);
        }
    },
    
    addWorkspace: function(doc, props, x, y, width, height) {
        if (props.descriptionSize > 0) {
            var descHeight = height / props.linesNumber * props.descriptionSize;
            var ypos = y + descHeight;
            var linesNumber = props.linesNumber - props.descriptionSize;
            doc.setLineWidth(0.3);
            doc.line(x, ypos, x + width, ypos);
            this.addLines(
                doc, props, linesNumber,
                x, ypos, width, height - descHeight
            );
        }
        else {
            this.addLines(
                doc, props, props.linesNumber,
                x, y, width, height
            );
        }
    },
    
    addLines: function(doc, props, number, x, y, width, height) {
        var lineHeight = height / number;
        for (var i = 0; i < number; i += 1) {
            var ypos = y + i * lineHeight;
            if (i != 0) {
                doc.setLineWidth(0.15); doc.setDrawColor(0, 0, 0);
                doc.line(x, ypos, x + width, ypos);
            }
            this.addLine(doc, props, x, ypos, width, lineHeight);
        }
    },
    
    addLine: function(doc, props, x, y, width, height) {
        var topPos = y + 0.1 * height;
        var bottomPos = y + 0.9 * height;
        
        doc.setLineWidth(0.15); doc.setDrawColor(0, 0, 0);
        doc.line(x, bottomPos, x + width, bottomPos);
        
        doc.setLineWidth(0.1); doc.setDrawColor(200, 200, 200);
        doc.line(x, topPos, x + width, topPos);
        
        // Draw subgroup lines
        var subGroupsNumber = props.lineSize * props.groupSize;
        var subGroupWidth = width / subGroupsNumber;
        for (var i = 1; i < subGroupsNumber; i++) {
            var subGroupX = x + i * subGroupWidth;
            doc.setLineWidth(0.1); doc.setDrawColor(200, 200, 200);
            doc.line(subGroupX, y, subGroupX, y + height);
        }

        // Draw group lines
        var groupWidth = width / props.lineSize;
        for (var i = 1; i < props.lineSize; i++) {
            var groupX = x + i * groupWidth;
            doc.setLineWidth(0.1); doc.setDrawColor(150, 150, 150);
            doc.line(groupX, y, groupX, y + height);
        }

        // Draw cells
        var cellsNumber =
            props.subGroupSize *
            props.groupSize *
            props.lineSize;
        var cellWidth = width / cellsNumber;
        for (var i = 1; i < cellsNumber; i++) {
            var cellX = x + i * cellWidth;
            doc.setLineWidth(0.15); doc.setDrawColor(0, 0, 0);
            doc.line(cellX, bottomPos, cellX, y + height);
        }
    }
};